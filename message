@app.get("/")
def index() -> FileResponse:
    return FileResponse("./frontend/index.html")


@app.get("/script.js")
def js() -> FileResponse:
    return FileResponse("./frontend/script.js")


@app.get("/style.css")
def style() -> FileResponse:
    return FileResponse("./frontend/style.css")

@app.post("/login")
def login(username, password, response: Response) -> dict:
    token: str = get_token_from_credentials(username, password)

    response.set_cookie(
        key="token",
        value=token,
        httponly=True,
        samesite="lax"
    )
    return {"message": "Token set"}

@app.get('/valid')
def check_token(token: Optional[str] = Cookie(None)) -> bool:
    return is_valid_token(token)

@app.get('/get_data')
def get_data(token: Optional[str] = Cookie(None)) -> list[Data]:
    if not is_valid_token(token):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="invalid token"
        )
    
    cast_token: str = cast(str, token)
    return get_things_from_token(cast_token)

@app.post('/add_data')
def add_data(data: Data, token: Optional[str] = Cookie(None)) -> None:
    if not is_valid_token(token):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="invalid token"
        )
    cast_token: str = cast(str, token)
    add_something(data, cast_token)

@app.delete('/delete_data')
def delete_data(id: int, token: Optional[str] = Cookie(None)) -> None:
    if not is_valid_token(token):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="invalid token"
        )
    cast_token: str = cast(str, token)
    delete_something(cast_token, id)

@app.delete('/delete_account')
def delete_account(username: str, password: str, token: Optional[str] = Cookie(None)) -> None:
    if not is_valid_token(token) and get_token_from_credentials(username, password) != token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="invalid token or credentials"
        )
    cast_token: str = cast(str, token)
    kys(cast_token)
